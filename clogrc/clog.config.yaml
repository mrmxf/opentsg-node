---
# yamllint disable rule:colons
#                             _                                       _
#   ___   _ __   ___   _ _   | |_   ___  __ _   ___   _ _    ___   __| |  ___
#  / _ \ | '_ \ / -_) | ' \  |  _| (_-< / _` | |___| | ' \  / _ \ / _` | / -_)
#  \___/ | .__/ \___| |_||_|  \__| /__/ \__, |       |_||_| \___/ \__,_| \___|
#        |_|                            |___/
# #############################################################################
# SNIPPETS
# #############################################################################

snippets:
  git:
    tag:
      ref: yq -r '.[0].version' releases.yaml
    message:
      ref: yq -r '.[0].note' releases.yaml
    suffix: b="$(git branch --show-current)";[[ "$b" == main ]]&&echo ""|||tr -d [:blank:]
  # --- project snippets:  clog project <snippet> ---------------------------
  # typically used for global tool version propagation, node version etc.
  project:
    config: |
      export PROJECT=$(basename $(pwd))              # project you're building
      # add a suffix to any build not on the main branch
      export bSUFFIX="$(git branch --show-current)" && [[ "$bSUFFIX"=="main" ]] && bSUFFIX=""
    needs:
      go-version: echo "1.24.0"
      hugo-version: echo "0.143.1"

check:
  pre-build:
    before: eval "$(clog Inc)"
    blocks:
      - finally: clog Log -I "      branch $(clog git branch)"
      - finally: clog Log -I "     tag-ref $(clog git tag ref)"
      - finally: clog Log -I "    tag-head $(clog git tag head)"
      - finally: clog Log -I "  tag-latest $(clog git tag latest)"
      - finally: clog Log -I "  tag-origin $(clog git tag origin)"
      - try: "[[ \"$(clog git tag head)\" != \"$(clog git tag ref)\" ]]"
        pass:  clog Log -S "      tag-head == tag-ref"
        catch: clog Log -W "      tag-head != tag-ref"
      - try: "[[ \"$(clog git tag latest)\" != \"$(clog git tag ref)\" ]]"
        pass:  clog Log -S "    tag-latest == tag-ref"
        catch: clog Log -W "    tag-latest != tag-ref"
      - try: "[[ \"$(clog git tag origin)\" != \"$(clog git tag ref)\" ]]"
        pass:  clog Log -S "    tag-origin == tag-ref"
        catch: clog Log -W "    tag-origin != tag-ref"
      - try: "[[ \"$(clog git hash head)\" != \"$(clog git hash origin)\" ]]"
        pass:  clog Log -S "     hash-head == hash-origin"
        catch: clog Log -W "     hash-head != hash-origin"
      - try: "[[ \"$(clog git message latest)\" != \"$(clog git message ref)\" ]]"
        pass:  clog Log -S "message latest == message-ref"
        catch: clog Log -W "message latest != message-ref"; \
               clog Log -W "($(clog git message latest)) != ($(clog git message ref))"
      - try: clog    git tree clean
        ok:    clog Log -I "working tree clean"
        catch: clog Log -E "working tree NOT clean"
      - try: clog    git tree ahead
        ok:    clog Log -E "working tree up to date with origin"
        catch: clog Log -E "working tree is ahead of origin"
      - try: clog   git tree behind
        ok:    clog Log -E "working tree up to date with origin"
        catch: clog Log -E "working tree is behind origin"
      - try: clog git unstaged
        ok:    clog Log -E "all changes staged"
        catch: clog Log -E "unstaged changes in working tree"
